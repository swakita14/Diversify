

@inject IStockRepository StockRepository
@inject ISectorRepository SectorRepository

@inject IStockAddService StockAddService
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
    Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@_stock" OnValidSubmit="() => AddStock(Overview, _stock.InvestmentAmount)">
                    <label for="invested-amount">Amount Invested</label>
                    <InputNumber @bind-Value=_stock.InvestmentAmount class="form-control" id="invested-amount" />
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public CompanyOverviewModel Overview { get; set; }

    private Stock _stock = new Stock();

    /**
     * Method that would add the stock to the current signed on user
     */
    public void AddStock(CompanyOverviewModel model, decimal investmentAmount)
    {
        Stock newStock = new Stock()
        {
            Name = model.Name,
            Symbol = model.Symbol,
            DividendYield = model.DividendYield,
            Sector = SectorRepository.GetSectorIdByName(model.Sector).SectorId,
            InvestmentAmount = investmentAmount,
            User = StockAddService.GetCurrentLoggedInUser()
        };

        StockRepository.AddStock(newStock);


    }





}
