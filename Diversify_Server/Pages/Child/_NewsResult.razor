

@inject ICompanyNewsService Client
@inject NavigationManager NavigationManager


<SfGrid DataSource="@_results.Articles" AllowPaging="true" AllowSorting="true" ShowColumnChooser="true">
    <GridPageSettings PageSize="6"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Article.UrlToImage) HeaderText="" Width="80" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var image = (context as Article);
                    <div class="image">
                        <img src="@image.UrlToImage" />
                    </div>
                }
            </Template>

        </GridColumn>

        <GridColumn Field=@nameof(Article.Title) HeaderText="Title" Width="120" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(Article.Author) HeaderText="Author" Width="150" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(Article.Description) HeaderText="Description" Width="150" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(Article.PublishedAt) HeaderText="Publish Date" Format="d" Type="ColumnType.Date" Width="120" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(Article.Source) HeaderText="Link" Width="120">
            <Template>
                @{
                    var news = (context as Article);
                    <div><a href="#" @onclick="@(() => Navigate(news))">View</a></div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<style>
    .image img {
        height: 60px;
        width: 70px;
    }
</style>




@code {

    [Parameter]
    public string CompanyName { get; set; }

    private NewsSearchResult _results = new NewsSearchResult();

    /**
     * Method searches for anything that is typed into parameter
     */
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(CompanyName))
        {
            _results = await Client.GetCompanyNewsAsync(CompanyName);
        }

        StateHasChanged();

    }

    /**
     * Navigation method
     */
    public void Navigate(Article source)
    {
        NavigationManager.NavigateTo(source.Url);
    }


}
