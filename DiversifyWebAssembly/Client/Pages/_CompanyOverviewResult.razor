@inject HttpClient HttpClient

<div class="jumbotron">
    <h5 class="display-4">@_results.Name (@_results.Symbol)</h5>
    <p class="lead">@TruncateAtWord(_results.Description, 300)</p>
    <hr class="my-4" />
    <div class="container">
        <div class="row">
            <div class="col-sm">
                <b>Sector:</b><p>@_results.Sector</p>
            </div>
            <div class="col-sm">
                <b>Industry:</b><p>@_results.Industry</p>
            </div>
            <div class="col-sm">
                <b>Exchange:</b><p>@_results.Exchange</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <b>EPS:</b><p>@_results.EPS</p>
            </div>
            <div class="col-sm">
                <b>Div/Yield:</b><p>@_results.DividendYield</p>
            </div>
            <div class="col-sm">
                <b>Ex-Dividend Date:</b><p>@_results.ExDividendDate</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <b>Profit Margin:</b><p>@_results.ProfitMargin</p>
            </div>
            <div class="col-sm">
                <b>Payout Ratio:</b><p>@_results.PayoutRatio</p>
            </div>
            <div class="col-sm">
                <b>PE Ratio:</b><p>@_results.PERatio</p>
            </div>
        </div>
        <hr class="my-4" />

    </div>
    <_AddStock @ref="_child" Overview="@_results"></_AddStock>
</div>

@code {
    [Parameter]
    public string CompanySymbol { get; set; }
    private CompanyOverviewModel _results = new CompanyOverviewModel();
    private _AddStock _child;

    protected override async Task OnParametersSetAsync()
    {
        _results = await HttpClient.GetFromJsonAsync<CompanyOverviewModel>($"api/company/symbol/{CompanySymbol}");
    }

    public static string TruncateAtWord(string input, int length)
    {
        if (input == null || input.Length < length)
            return input;
        int iNextSpace = input.LastIndexOf(" ", length, StringComparison.Ordinal);
        return string.Format("{0}â€¦", input.Substring(0, (iNextSpace > 0) ? iNextSpace : length).Trim());
    }
}